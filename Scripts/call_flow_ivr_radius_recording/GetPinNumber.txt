EVENT UserEvent()
{
	int nPinLen = 0;
	int nAuthResult = 0;

	for (int i = 0; i < 2; i++) {
		LOG ("g_strDigits:" + g_strDigits);
		nPinLen = strlen(g_strDigits);
		if (nPinLen < USER_DIGIT_LEN) {
			if (nPinLen == 0) {
				PlayAudio(_LEG_A_ , "PinCode_NoInput");				
			}
			else {
				PlayAudio(_LEG_A_ , "PinCode_Wrong");
			}
		}
		else {
			int nRet = 0;
			g_strUser = g_strDigits;

			// Which server will be used for authentication?
			if (USE_APP_SERVER == RADIUS_SERVER) {
				nRet = RadiusAuthenticateUser();
			}
			if (USE_APP_SERVER == HTTP_SERVER) {
				nRet = HTTPAuthenticateUser();
			}

			if (nRet > 0) {
				//Everything is OK. Time to get destination...
				RunScript("GetDestination.txt", "UserEvent");
			}
			else {
				PlayAudio(_LEG_A_ , "Authentication_Reject");	
			}
		}
		g_strDigits = GetDigits(_LEG_A_, USER_DIGIT_LEN, "pincode_enter");
	}
	PlayAudio(_LEG_A_, "MaxPinTryOccured");
	PlayAudio(_LEG_A_, "goodbye");
	AbortSession();
}

FUNCTION bool RadiusAuthenticateUser()
{
	AddRadiusAttr(1, "sabanci"); // user
	AddRadiusAttr(2, "sabanci"); // pwd
	AddRadiusAttr(4, "192.168.1.2"); // nas ip
	AddRadiusAttr(31, _CALLING_NR_); // calling id 
	AddRadiusAttr(44, i2str(_SESSION_ID_)); // acct session id
	//AddRadiusAttr(6, "1"); // service type

	AddRadiusVSAAttr(205, "2", 3645); // vendor mind, BillingModel
	AddRadiusVSAAttr(204, "TL", 3645); // vendor mind, Currency
	bool bRet = FALSE;
	int nRet = SendRadiusRequest(1, APP_SERVER_RADIUS, 1812);
	if (nRet == 0)
	{
		string strSessionID = GetRadiusAttrValue(44);
		string strBalance = GetRadiusVSAAttrValue(203); 
		string strCurrency = GetRadiusVSAAttrValue(204); 
		string strBillingModel = GetRadiusVSAAttrValue(205); 
		string strMindStatus = GetRadiusVSAAttrValue(207); 
		LOG("Authenticate strSessionID:" + strSessionID);
		LOG("Authenticate strBalance:" + strBalance);
		LOG("Authenticate strCurrency:" + strCurrency);
		LOG("Authenticate strBillingModel:" + strBillingModel);
		LOG("Authenticate strMindStatus:" + strMindStatus);
		bRet = TRUE;
	}
	if (nRet == 1) 
	{
		LOG("Radius reject");
	}
	if (nRet == 2)
	{
		LOG("Radius send Technical problem");
	}
	ResetRadius();
	return bRet;
}

FUNCTION int HTTPAuthenticateUser()
{
	LOG("HTTPAuthenticateUser is interpreting");
	
	AddXMLParam("Pincode",  g_strUser);  
	bool bRet = PostHttpXML(APP_SERVER_HTTP, "/AuthenticateUser.asp");
	if (bRet != TRUE) {
		LOG("PostHttpXML Failed. Error Description:" + GetLastRuntimeErrorMessage());
		PlayAudio(_LEG_A_, "Technical_Problem");
		return -1;
	}
	
	int nRetVal = 0;
	string strValidated = GetXMLParamValue("IsValidated");
	if (strValidated == "1") {
		LOG("User is authenticated");
		nRetVal = 1;
	}
	else {
		LOG("User is not authenticated");
		nRetVal = 0;
	}
	ResetXML(); 
	return nRetVal;
}

EVENT CallEnd()
{
	LOG("CallEnd in GetPinNumber is interpreting");
	LOG("-------SESSION_ID:[" + i2str(_SESSION_ID_) + "]---------");
	LOG("Session has closed");
	ReleaseSession();
}

